package com.uis.iot.admin.utils;

import java.security.SecureRandom;

import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.bcrypt.BCrypt;

import com.uis.iot.common.utils.CommonUtils;

/**
 * @author felipe.estupinan
 *
 */
public abstract class Utils {

	private Utils() {
		throw new IllegalStateException("Utility class");
	}

	public static final Sort NAME_ASC_SORT = Sort.by(Sort.Direction.ASC, "name");

	/**
	 * Sends the password retrieve email to the given email address.
	 * 
	 * @param name    of the user.
	 * @param to      the email of the user to retrieve it's password.
	 * @param newPass the password generated by the sytem.
	 */
	public static void sendPasswordEmail(String name, String to, String newPass) {

		final StringBuilder content = new StringBuilder(400);
		content.append(name)
				.append("<br><br>Se ha realizado un solicitud de cambio de la contrase침a asociada a su cuenta.")
				.append("<br><br>Su nueva contrase침a es: <b>" + newPass + "</b>").append("<br><br>Saludos,")
				.append("<br><br>IoT UIS");

		CommonUtils.sendEmail(to, "IoT UIS - Notificaci칩n cambio de contrase침a", content.toString());
	}

	/**
	 * Generates a random string with a desired length.
	 * 
	 * @param length of the string.
	 * @return the generated string.
	 */
	public static String randomString(int length) {
		final String chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		final SecureRandom rnd = new SecureRandom();

		final StringBuilder sb = new StringBuilder(length);
		for (int i = 0; i < length; i++)
			sb.append(chars.charAt(rnd.nextInt(chars.length())));

		return sb.toString();
	}

	/**
	 * Hashes the passed password.
	 * 
	 * @param password to be hashed.
	 * @return the encrypted password, never <code>null</code>.
	 */
	public static String hashPassword(String password) {
		return BCrypt.hashpw(password, BCrypt.gensalt());
	}

	/**
	 * Verifies if the passed plain (not hashed) password matches with an already
	 * hashed one.
	 * 
	 * @param plainPassword  to be compared.
	 * @param hashedPassword the already hashed password.
	 * @return <code>true</code> if the two passwords match, <code>false</code>
	 *         otherwise.
	 */
	public static boolean passwordsMatch(String plainPassword, String hashedPassword) {
		return BCrypt.checkpw(plainPassword, hashedPassword);
	}
}
